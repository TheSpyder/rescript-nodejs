// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Disconnect = require("disconnect");
var Nodecluster = require("node:cluster");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");

function classify(x) {
  var addressType = x.addressType;
  var intOrString = typeof addressType;
  switch (intOrString) {
    case "number" :
        switch (addressType) {
          case -1 :
              return {
                      TAG: "UnixDomainSocket",
                      _0: x
                    };
          case 4 :
              return {
                      TAG: "TcpV4",
                      _0: x
                    };
          case 6 :
              return {
                      TAG: "TcpV6",
                      _0: x
                    };
          default:
            return {
                    TAG: "Unknown",
                    _0: x
                  };
        }
    case "string" :
        switch (addressType) {
          case "udp4" :
              return {
                      TAG: "Udp4",
                      _0: x
                    };
          case "udp6" :
              return {
                      TAG: "Udp6",
                      _0: x
                    };
          default:
            return {
                    TAG: "Unknown",
                    _0: x
                  };
        }
    default:
      return {
              TAG: "Unknown",
              _0: x
            };
  }
}

var Address = {
  classify: classify
};

var Message = {};

var Events = {};

function sendHttpServerHandle(options, msg, handle) {
  msg.send(handle, Js_null_undefined.fromOption(options));
}

function sendSocketHandle(options, msg, handle) {
  msg.send(handle, Js_null_undefined.fromOption(options));
}

var $$Worker = {
  Events: Events,
  sendHttpServerHandle: sendHttpServerHandle,
  sendSocketHandle: sendSocketHandle
};

function disconnect(callback, param) {
  Disconnect(Js_null_undefined.fromOption(callback));
}

function fork(env, param) {
  return Nodecluster.fork(env);
}

var decodeSchedulingPolicy = Nodecluster.schedulingPolicy === Nodecluster.SCHED_RR ? "SCHED_RR" : "SCHED_NONE";

function getWorker(_workers, id) {
  return Js_dict.get(_workers, id.toString());
}

exports.Address = Address;
exports.Message = Message;
exports.$$Worker = $$Worker;
exports.disconnect = disconnect;
exports.fork = fork;
exports.decodeSchedulingPolicy = decodeSchedulingPolicy;
exports.getWorker = getWorker;
/* decodeSchedulingPolicy Not a pure module */
